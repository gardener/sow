#!/usr/bin/env bash
#
# Copyright 2019 Copyright (c) 2019 SAP SE or an SAP affiliate company. All rights reserved. This file is licensed under the Apache Software License, v. 2 except as noted otherwise in the LICENSE file.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

SOW="$(cd "$(dirname "${BASH_SOURCE[0]}")/.."; echo "$PWD" )"
SOWLIB="$SOW/lib"
TOOL="$(basename "$0")"

VERSION="$(cat "$SOW/VERSION")"

get_version()
{
  echo "$nTOOL version $VERSION"
}

help()
{
  confirm "$TOOL - a tiny installer framework based on components and plugins"
  echo
  title "$nTOOL [<options>] [<command>]"
  echo
  title "Options:"
  found "    -m            match given $nCOMPONENT names against file system"
  found "                  or complete list of $nCOMPONENTS"
  found "    -a            complete the $nCOMPONENT set according to their dependencies"
  found "    -n            no redeploy, deploy only yet undeployed $nCOMPONENTS"
  found "    -A            use all $nCOMPONENTS if no one is specified"
  found "    -v            verbose mode"
  found "    -k            keep temporaray files"
  found "    -x            trace mode"
  found "    -X <plugin>   trace mode for given plugin"
  found "    -D            debug mode"
  found "    --dryrun      dry run (note: not all plugins may support a dry run!)"
  found "    --version     show version"
  echo
  title "Commands:"
  info "  info  [-aml]                   show info about current location"
  found "    -l            show extended $nCOMPONENT info"
  info "  order [-daA] {<components>}    show $nCOMPONENT order"
  found "    -d            deletion order"
  found "    -u            update order for dependent $nCOMPONENTS"
  info "  show [-l]{<components>}        show info about $nCOMPONENTS"
  found "    -l            show extended $nCOMPONENT info"
  info "  deploy [-aAmn] {<components>}  deploy $nCOMPONENTS"
  found "    --force       skip missing older migration steps"
  found "                  (ATTENTION: you should know what you are doing)"
  found "    --parallel <n> deploy components with a maximum of n in parallel"
  found "    -u            update dependent $nCOMPONENTS"
  info "  delete [-aAm] {<components>}   delete deployment of $nCOMPONENTS"
  found "    --force        additional actions from handlers on delete (e.g. deleting state like PVC)"
  found "    --parallel <n> delete components with a maximum of n in parallel"
  info "  burndown [-aAm] {<components>} alias for 'delete --force'"
  found "    --parallel <n> delete components with a maximum of n in parallel"
  info "  generate [-cpdPse] {<components>} execute generation step(s) only"
  info "                                    default is component,prepare,deployment"
  found "    -c            also the component manifest processing step"
  found "    -p            also the prepare step"
  found "    -d            also the deploment manifest processing step"
  found "    -P            also the plugin execution step"
  found "    -e            also the export step"
  info "  add {<components>}             create a frame for a new $nCOMPONENT"
  found "    -p <product>  add $nCOMPONENT to given product"
  info "  vi [-cLegsprl] {<file>}        lookup and edit file"
  found "    -c <comp>     $nCOMPONENT different from current"
  found "    -L            only list paths"
  found "    -e            export dir"
  found "    -s            state dir"
  found "    -g            gen dir"
  found "    -p            $nPRODUCT dir"
  found "    -r            landscape dir"
  found "    -l            local $nCOMPONENT"
  info "  diff [-dse] {<components>}     compare old and new version of generated files"
  found "    -e            export file"
  found "    -s            state file"
  found "    -d            deployment file"
  title "Additional Commands:"
  CMDS_list_commands | CMDS_format_help
}


source "$SOWLIB/utils"
source "$SOWLIB/meta"
source "$SOWLIB/opts"
source "$SOWLIB/cmd"
source "$SOWLIB/scheduler"

if [ -f ~/.${nTOOL}rc ]; then
  source  ~/.${nTOOL}rc
fi

declare -A opts=( )
declare -A params
params=( [m]=matching [k]=keep [c]=range [a]=all [A]=All [n]=new [v]=verbose [version]="" [dryrun]="" [x]=trace [D]=debug [p]="=$nPRODUCT" [terms]="=" [layout]="=" [X]="=plugin" [S]=stacktrace [color]= )
OPT_parse_options params opts "$@"
shift $(( _cnt - 1 ))

if [ ${opts[color]+set} ]; then
  export color_mode=X
  export color_bold=X
fi


: ${CFG_LAYOUT:=garden}
: ${CFG_TERMS:=garden}

if [ -n "${opts[layout]}" ]; then
  CFG_LAYOUT="${opts[layout]}"
  CFG_TERMS=$CFG_LAYOUT
fi
if [ -n "${opts[terms]}" ]; then
  CFG_TERMS="${opts[terms]}"
fi
source "$SOW/layout/struct/$CFG_LAYOUT"
source "$SOW/layout/terms/$CFG_TERMS"


case "$1" in
  version) get_version
           exit 0;;
esac

componentStub()
{
  local __stub
  jsonAddString __stub "<<" "(( &temporary &inject ))"
  jsonAddString __stub ROOTDIR "$ROOT"
  jsonAddString __stub ROOTPRODUCTDIR "$ROOTPRODUCTDIR"
  jsonAddString __stub PRODUCT "$PRODUCT"
  jsonAddString __stub PRODUCTDIR "$PRODUCTDIR"
  jsonAddString __stub COMPONENT "$COMPONENT"
  jsonAddString __stub GENDIR "$GENDIR"
  jsonAddString __stub STATEDIR "$STATEDIR"
  jsonAddString __stub EXPORTDIR "$EXPORTDIR"
  local curvers="${VERSIONS["$PRODUCT"]}"
  if [ -n "$curvers" ]; then
    jsonAdd __stub SPECVERSION "$curvers"
    local deployed=0
    if [ -f "$STATEDIR/$fSPECVERSION" ]; then
      deployed="$(cat "$STATEDIR/$fSPECVERSION")"
    fi
    if ! _is_number "$deployed"; then
      fail "deployed component version '$deployed' for $COMPONENT is no number"
    fi
    if [ "$2" != delete ] && isDeployed "$COMPONENT"; then
      if [ $deployed -ne $curvers -a $(( curvers - deployed)) -ne 1 ]; then
        if [ ${opts[force]+set} ]; then
          warn "upgrade component $COMPONENT from version $deployed to $curvers is not supported"
        else
          fail "upgrade component $COMPONENT from version $deployed to $curvers is not supported"
        fi
      fi
    fi
    jsonAdd __stub DEPLOYEDVERSION "$deployed"
    if isDeployed "$COMPONENT" && [ $curvers -ne $deployed ]; then
      jsonAdd __stub MIGRATE true
    else
      jsonAdd __stub MIGRATE false
    fi
  else
    jsonAdd __stub MIGRATE true
  fi
  jsonAdd $1 "env" "{ $__stub }"
}

_setupKind()
{
  if [ -d "$1/$2" ]; then
    while IFS= read -r line; do
      $4 "$line"
    done < <(find "$1/$2" -name "$3")
  fi
}

setupProductMeta()
{
  local d
  local product
  local rel

  local jprod

  rel="${1#$ROOT/}"
  product="${2:-${1##*/}}"
  if [ -n "${PRODUCTS["$product"]}" ]; then
    fail "$nPRODUCT $product ($rel) defined twice; ${PRODUCTS["$product"]}"
  fi
  PRODUCTS["$product"]="$rel"
  if [ -f "$1/$fSPECVERSION" ]; then
    local curvers="$(cat "$1/$fSPECVERSION")"
    if ! _is_number "$curvers"; then
      fail "production version '$curvers' for $product is no number"
    fi
    VERSIONS["$product"]="$curvers"
    jsonAdd jprod specversion "$curvers"
  fi
  jsonAddString jprod dir "$rel"
  jsonAdd JMETAPRODS "$product" "{ $jprod }"

  debug "found $nPRODUCT $product: $rel"

  _setupKind "$1" "$dTEMPLATES" "$fTEMPDEF" setupTemplateMeta
  _setupKind "$1" "$dCOMPONENTS" "$fCOMPDEF" setupComponentMeta

  for d in "$1/$dPRODUCTS"/*; do
    if [ -d "$d" ]; then
      setupProductMeta "$d"
    fi
  done

  if [ -f "$1/lib/$nTOOL.sh" ]; then
    debug "sourcing exensions of product $product($reldir)"
    source "$1/lib/$nTOOL.sh"
  fi
}

setupTemplateMeta()
{
  local jattr

  setTemplate "${1%/*}"
  debug "  $template: $reldir ($product)"
  getTemplateJSON "$line"
  getValue templ template.template TEMPLATEJSON

  TEMPLATES["$template"]="$reldir"

  jsonAddString jattr dir "$reldir"
  jsonAddString jattr product "$product"
  if [ -n "$templ" ]; then
    if [ -z "${TEMPLATES[$templ]}" ]; then
      warn "$nTEMPLATE $template ($product) uses non-existent template $templ"
    fi
    jsonAddString jattr template "$templ"
  fi

  jsonAdd JMETATEMPS "$template" "{ $jattr }"
}

setupComponentMeta()
{
  local jattr
  local jgraph
  local jdeps

  setComponent "${1%/*}"
  debug "  $component: $reldir ($product)"
  COMPONENTS["$component"]="$reldir"

  getComponentJSON "$line" "$component" "$product"
  declare -A import_map
  getImports import_map COMPONENTJSON
  getValue templ component.template COMPONENTJSON
  getValue active component.active COMPONENTJSON
  if [ -z "$active" ]; then
    active=true
  fi


  jsonAdd jattr active "$active"
  jsonAddString jattr dir "$reldir"
  jsonAddString jattr product "$product"
  if [ -n "$templ" ]; then
    if [ -z "${TEMPLATES[$templ]}" ]; then
      warn "$nCOMPONENT $component ($product) uses non-existent template $templ"
    fi
    jsonAddString jattr template "$templ"
  fi

  for i in "${!import_map[@]}"; do
    i="$(sed -e 's/^[[:space:]]*//' -e 's/[[:space:]]*$//'<<<"$i")"
    debug "    $i: ${import_map["$i"]}"

    local jdep=""
    jsonAddString jdep label "$i"
    jsonAddString jdep component "${import_map["$i"]}"
    jsonAdd jdeps "{ $jdep }"
    jsonAddString jgraph "${import_map["$i"]}"
  done
  jsonAdd jattr imports "[ $jdeps ]"

  if [ -n "${VERSIONS["$product"]}" ]; then
    jsonAdd jattr specversion "${VERSIONS["$product"]}"
    if [ -f "$STATE/$component/$fSPECVERSION" ]; then
      local v="$(cat "$STATE/$component/$fSPECVERSION")"
      if ! _is_number "$v"; then
        fail "specification version '$v' of component $component is no number"
      fi
      jsonAdd jattr deployedversion $v
    else
      jsonAdd jattr deployedversion 0
    fi
  fi
  jsonAdd JMETACOMPS "$component" "{ $jattr }"
  if [ $active == true ]; then
    jsonAdd JMETAGRAPH "$component" "[ $jgraph ]"
  fi
}

setupLandscape()
{
  declare -Ag PRODUCTS VERSIONS TEMPLATES COMPONENTS
  local JMETAGRAPH=
  local JMETATEMPS=
  local JMETACOMPS=
  local JMETAPRODS=
  local JMETA=
  local METACHECKSUM=
  local OLDMETACHECKSUM=

  setupProductMeta "$ROOTPRODUCTDIR" "$MAINPRODUCT"

  jsonAdd JMETA products   "{ $JMETAPRODS }"
  jsonAdd JMETA components "{ $JMETACOMPS }"
  jsonAdd JMETA templates  "{ $JMETATEMPS }"
  jsonAdd JMETA graph      "{ $JMETAGRAPH }"

  METAJSON="{ $JMETA }"
  METACHECKSUM="$(md5sum <<<"$METAJSON")"
  if [ -f "$META.md5" -a -f "$META" ]; then
    OLDMETACHECKSUM=$(cat "$META.md5")
  fi
  if [ "$METACHECKSUM" = "$OLDMETACHECKSUM" ]; then
    METAJSON=$(cat "$META")
  else
    METAJSON="$(spiff merge --json "$SOW/helper/closure.yaml" - "$SOWLIB/templates/graph.yaml" <<<"$METAJSON")"
    echo "$METAJSON" | jq .>"$META"
    echo -n "$METACHECKSUM" >"$META.md5"
  fi

  cycles=( )
  getJSONList cycles cycles METAJSON

  FAILED=
  if [ ${#cycles[@]} -ne 0 ]; then
     info "found dependency cycles:"
     for c in "${cycles[@]}"; do
       cycle=( )
       getValueList cycle "" c
       echo "--> ${cycle[@]}"
     done
     FAILED=X
  fi

  msg="found missing dependencies:"
  for c in "${!COMPONENTS[@]}"; do
    missing=( )
    getMetaComponentMissing missing "$c"
    if [ ${#missing[@]} -ne 0 ]; then
      if [ -n "$msg" ]; then
        echo "$msg"
        msg=
      fi
      echo "--> $c: ${missing[@]}"
      FAILED=X
    fi
  done

  if [ -n "$FAILED" ]; then
    fail "aborted due to dependency problems"
  fi

  if [ "$cmd" != "help" ]; then
    getValue INSTALLATION_HANDLER "meta.installationHandler.path" CONFIGJSON
    getJSON INSTALLATION_HANDLER_CONFIG "meta.installationHandler.config" CONFIGJSON
    if [ -n ${INSTALLATION_HANDLER:-""} ]; then
      if [[ "$INSTALLATION_HANDLER" != /* ]]; then
        # relative to root folder if no absolute path given
        INSTALLATION_HANDLER="$ROOT/$INSTALLATION_HANDLER"
      fi
      if [ ! -x "$INSTALLATION_HANDLER" ]; then
        fail "no executable installation handler script found at '$INSTALLATION_HANDLER'"
      fi
      local status
      catch status exec_cmd "$INSTALLATION_HANDLER" prepare "$INSTALLATION_HANDLER_CONFIG"
      if [ $status -ne 0 ]; then
        # prepare failed, execute neither command nor finalize
        unset INSTALLATION_HANDLER
        fail "aborting command: prepare failed"
      fi
    fi
  fi
}

isDeployed()
{
  if [ -f "$STATE/$1/state.info"  ]; then
    return 0
  fi
  return 1
}

isError()
{
  if [ -f "$STATE/$1/state.info"  ]; then
    if [ "$(cat "$STATE/$1/state.info")" != deployed ]; then
      return 0
    fi
  fi
  return 1
}

# $1: target var
# $2: spec
lookupTemplates()
{
  local var="$1"
  local spec="$2"
  if [ "$spec" = all ]; then
    eval "$var=( \"\${!TEMPLATES[@]}\" )"
    return 0
  fi
  local dir
  local cdir
  local c
  local __found=( )
  if [ ${opts[matching]+set} ]; then
    if [ -d "$2" ]; then
       if [[ "$1" = /* ]]; then
         dir="$1"
       else
         dir="$(cd "$2"; echo "$PWD")"
       fi
       for c in "${!TEMPLATES[@]}"; do
         cdir="$ROOT/${TEMPLATES["$c"]}"
         if [[ "$cdir" = $dir/* ]]; then
           __found=( "${__found[@]}" "$c" )
         fi
       done
    fi

    if [ ${#__found[@]} -eq 0 ]; then
       for c in "${!TEMPLATES[@]}"; do
         if [[ "$c" = $2/* || "$2" = "$c" ]]; then
           __found=( "${__found[@]}" "$c" )
         fi
       done
    fi
  fi

  if [ ${#__found[@]} -eq 0 ]; then
    if [ "$2" = . -a -n "$TEMPLATE" ]; then
       __found=( "$TEMPLATE" )
    fi
  fi

  if [ ${#__found[@]} -eq 0 ]; then
    if [ "$2" != . ]; then
      c="$(CMDS_resolve_shortcut "$2" "${!TEMPLATES[@]}")"
      if [ -n "$c" ]; then
        if [ -n "${TEMPLATES["$c"]}" ]; then
          __found=( "${__found[@]}" "$c" )
        fi
      fi
    fi
  fi
  eval "$var=( \"\${__found[@]}\" )"
}

# $1: target var
# $2: spec
lookupComponents()
{
  local var="$1"
  local spec="$2"
  if [ "$spec" = all ]; then
    eval "$var=( \"\${!COMPONENTS[@]}\" )"
    return 0
  fi
  local dir
  local cdir
  local c
  local __found=( )
  if [ ${opts[matching]+set} ]; then
    if [ -d "$2" ]; then
       if [[ "$1" = /* ]]; then
         dir="$1"
       else
         dir="$(cd "$2"; echo "$PWD")"
       fi
       for c in "${!COMPONENTS[@]}"; do
         cdir="$ROOT/${COMPONENTS["$c"]}"
         if [[ "$cdir" = $dir/* ]]; then
           __found=( "${__found[@]}" "$c" )
         fi
       done
    fi

    if [ ${#__found[@]} -eq 0 ]; then
       for c in "${!COMPONENTS[@]}"; do
         if [[ "$c" = $2/* || "$2" = "$c" ]]; then
           __found=( "${__found[@]}" "$c" )
         fi
       done
    fi
  fi

  if [ ${#__found[@]} -eq 0 ]; then
    if [ "$2" = . -a -n "$COMPONENT" ]; then
       __found=( "$COMPONENT" )
    fi
  fi

  if [ ${#__found[@]} -eq 0 ]; then
    if [ "$2" != . ]; then
      c="$(CMDS_resolve_shortcut "$2" "${!COMPONENTS[@]}")"
      if [ -n "$c" ]; then
        if [ -n "${COMPONENTS["$c"]}" ]; then
          __found=( "${__found[@]}" "$c" )
        fi
      fi
    fi
  fi
  eval "$var=( \"\${__found[@]}\" )"
}

walkTemplates()
{
  local dir
  local templ
  local template
  if [ -n "$1" ]; then
    dir="${TEMPLATES[$1]}"
    if [ -n "$reldir" ]; then
      local product
      local reldir
      local productdir
      setTemplate "$ROOT/$dir"
      getTemplateJSON "$ROOT/$dir/$fTEMPDEF"
      "${@:2}"
      getValue templ template.template TEMPLATEJSON
      walkTemplates "$templ" "${@:2}"
    fi
  fi
}

#
# slist     array
# stubsrc   map
#
addTemplateStubs()
{
  walkTemplates "$1" _addTemplateStubs
}

_addTemplateStubs()
{
  declare -a tstubs=( )
  getValueList tstubs template.stubs TEMPLATEJSON
  if [ ${#tstubs[@]} -ne 0 ]; then
    for i in "${tstubs[@]}"; do
      stubsrc["$i"]="template $template"
    done
    slist=( "${tstubs[@]}" "${slist[@]}" )
  fi
}

#
# $1: var
# $2 file
#
addTemplateStandardStubs()
{
  walkTemplates "$1" _addTemplateStandardStubs "${@:2}"
}

_addTemplateStandardStubs()
{
  if [ -f "$ROOT/$dir/$2" ]; then
    eval $1="( \"\$ROOT/\$dir/\$2\" \"\${$1[@]}\" )"
  fi
}

# $1: var
# $2: file
# $3: template
getComponentStandardStubs()
{
  if [ -f "$CURRENT/$2" ]; then
    eval "$1=( \"\$CURRENT/\$2\" )"
  else
    eval $1="( )"
  fi
  addTemplateStandardStubs "$3" "$1" "$2"
}

setTemplate()
{
  product=
  reldir=
  productdir="$(getProductDir "$1")"
  template=
  if [ -n "$productdir" ]; then
    reldir="${1#$ROOT/}"
    product="$(getProductForDir "$productdir")"
    template="${1#$productdir/$dTEMPLATES/}"
  fi
}

setComponent()
{
  product=
  reldir=
  productdir="$(getProductDir "$1")"
  component=
  if [ -n "$productdir" ]; then
    reldir="${1#$ROOT/}"
    product="$(getProductForDir "$productdir")"
    component="${1#$productdir/$dCOMPONENTS/}"
  fi
}

CMD_list()
{
  local comps=( )
  local found=( )

  for c in "$@"; do
    lookupComponents found "$c"
    comps=( "${comps[@]}" "${found[@]}" )
  done
  setUniq comps "${comps[@]}"
  for c in "${comps[@]}"; do
    found "$c"
  done
}

###########################################################################
# commands
###########################################################################

# missing command handler
# $1: prefix of missing command function
# $2: command name
# $3+: command arguments
handle_action_command()
{
  if [ "$(type -t "$1$2")" == "function" ]; then
    $1$2 "${@:3}"
  else
    CMD_deploy "${@:2}"
  fi
}



showComponent()
{
  local c="$1"
  local order
  local comp
  local active
  local prod
  local imps
  local label
  local dep
  local dir
  local usedby
  local i


  if [ -n "$2" ]; then
    title " - $nCOMPONENT $c: ${COMPONENTS["$c"]}"
  else
    title " - $c: ${COMPONENTS["$c"]}"
  fi
  getComponentMeta comp "$c"
  getComponentMetaProduct prod comp
  getMetaProductDir dir "$prod"
  info "     $nPRODUCT: $prod ($dir)"
  if isDeployed "$c"; then
    if isError "$c"; then
      error "     deployed with error"
    else
      confirm "     deployed"
    fi
    if [ -n "${VERSIONS["$prod"]}" ]; then
      local deployed=0
      if [ -f "$STATE/$c/VERSION" ]; then
        deployed="$(cat "$STATE/$c/VERSION")"
      fi
      if ! _is_number "$deployed"; then
        error "     spec version: $deployed (no number) (actual ${VERSIONS["$prod"]})"
      else
        if [ $deployed -ne ${VERSIONS["$prod"]} ]; then
          if [ $(( VERSIONS["$prod"] - deployed)) -ne 1 ]; then
            error "     spec version:  $deployed (actual ${VERSIONS["$prod"]}) not upgradable"
          else
            warn "     spec version: $deployed (actual ${VERSIONS["$prod"]})"
          fi
        else
          echo "     spec version: ${deployed}"
        fi
      fi
    fi
  else
    info "     not deployed"
  fi
  getValue templ template comp
  if [ -n "$templ" ]; then
    if [ -n "${TEMPLATES[$templ]}" ]; then
      info "     $nTEMPLATE: $templ (${TEMPLATES[$templ]})"
    else
      error "     $nTEMPLATE: $templ (not found)"
    fi
    depls=( )
    CURRENT="$ROOT/${COMPONENTS["$c"]}"
    getComponentStandardStubs depls $fACTIONDEF "$templ"
    info "     deployment manifests:"
    for d in "${depls[@]}"; do
      echo "      - ${d#$ROOTPRODUCTDIR/}"
    done

    getComponentStandardStubs depls export.yaml "$templ"
    info "     export definitions:"
    for d in "${depls[@]}"; do
      echo "      - ${d#$ROOTPRODUCTDIR/}"
    done
  fi
  getValue active active comp
  info "     active: $active"
  if [ ${opts[long]+set} ]; then
    info "     dependencies:"
    getJSONList imps "imports" comp
    for i in "${imps[@]}"; do
      getValue label label i
      getValue dep component i
      found "     - $label: $dep"
    done
    getMetaComponentUsedby usedby "$c"
    info "     direct users:"
    for i in "${usedby[@]}"; do
      found "     - $i"
    done
    info "     gendir: $GEN/$c"
    info "     exportdir: $EXPORT/$c"
    info "     statedir: $STATE/$c"
    ( # should be part of the landscape meta data, later on
      CURRENT="$ROOT/${COMPONENTS["$c"]}"
      setComponent "$CURRENT"
      getComponentJSON "$CURRENT/$fCOMPDEF" "$c" "$prod"
      PRODUCTDIR="$productdir"

      declare -a slist=( )
      declare -A stubsrc=( )

      # evaluate additional stubs
      getValueList slist component.stubs COMPONENTJSON
      if [ ${#slist[@]} -ne 0 ]; then
        for i in "${slist[@]}"; do
          stubsrc["$i"]="local"
        done
      fi
      addTemplateStubs "$templ"

      if [ ${#slist[@]} -ne 0 ]; then
        info "     configured deployment stubs:"
        for i in "${slist[@]}"; do
          local stub
          stub="$(lookupStub "$i")"
          if [ -z "$stub" ]; then
            error "     - $i [${stubsrc[$i]}] (not found)"
          else
            found "     - $i [${stubsrc[$i]}] (${stub#$ROOT/})"
          fi
        done
      fi
    )
    getJSON comp "closures[\"$c\"]" METAJSON
    getValueList order "order" comp
    info "     $nTOOL order for required $nCOMPONENTS:"
    for i in "${order[@]}"; do
      found "     - $i"
    done
    getValueList order "usedorder" comp
    info "     deletion order for using $nCOMPONENTS:"
    for i in "${order[@]}"; do
      found "     - $i"
    done
  fi
}

showTemplate()
{
  local c="$1"
  local comp
  local prod
  local dir
  local i


  if [ -n "$2" ]; then
    title " - $nTEMPLATE $c: ${TEMPLATES["$c"]}"
  else
    title " - $c: ${TEMPLATES["$c"]}"
  fi
  getTemplateMeta comp "$c"
  getTemplateMetaProduct prod comp
  getMetaProductDir dir "$prod"
  info "     $nPRODUCT: $prod ($dir)"
  getValue templ template comp
  if [ -n "$templ" ]; then
    if [ -n "${TEMPLATES[$templ]}" ]; then
      info "     $nTEMPLATE: $templ (${TEMPLATES[$templ]})"
    else
      error "     $nTEMPLATE: $templ (not found)"
    fi
  fi
  if [ ${opts[long]+set} ]; then
    ( # should be part of the landscape meta data, later on
      CURRENTTEMP="$ROOT/${TEMPLATES["$c"]}"
      setTemplate "$CURRENTTEMP"
      getTemplateJSON "$CURRENTTEMP/$fTEMPDEF"
      PRODUCTDIR="$productdir"

      declare -a slist=( )
      declare -A stubsrc=( )

      # evaluate additional stubs
      getValueList slist template.stubs TEMPLATEJSON
      if [ ${#slist[@]} -ne 0 ]; then
        for i in "${slist[@]}"; do
          stubsrc["$i"]="local"
        done
      fi
      addTemplateStubs "$templ"

      if [ ${#slist[@]} -ne 0 ]; then
        info "     configured template stubs:"
        for i in "${slist[@]}"; do
          local stub
          stub="$(lookupStub "$i")"
          if [ -z "$stub" ]; then
            error "     - $i [${stubsrc[$i]}] (not found)"
          else
            found "     - $i [${stubsrc[$i]}] (${stub#$ROOT/})"
          fi
        done
      fi
    )
  fi
}

CMD_help()
{
  if [ $# -eq 0 ]; then
    help
  else
    CMDS_help_command "$1"
  fi
  exit 0
}

CMD_version()
{
  get_version
  exit 0
}

CMD_info()
{
  local order
  local comp
  local active
  local prod
  local imps
  local label
  local dep
  local i

  local data=$(declare -p opts)
  declare -A params
  eval "declare -A opts="${data#*=}
  params=( [l]=long [a]=all [m]=matching )
  OPT_parse_options params opts "$@"
  shift $(( _cnt - 1 ))

  title "$nLANDSCAPE" "$ROOT"
  comps=( )
  templs=( )
  if [ ${opts[all]+set} ]; then
    comps=( "${!COMPONENTS[@]}" )
    templs=( "${!TEMPLATES[@]}" )
  else
    if [ -n "$PRODUCTDIR" ]; then
      title "$nPRODUCT" "$PRODUCT (${PRODUCTDIR#$ROOT/})"
    fi
    if [ ${opts[matching]+set} ]; then
      resolveComponents comps .
    fi
  fi
  if [ ${#comps[@]} -ne 0 -o ${#templs[@]} -ne 0 ]; then
    if [ ${#templs[@]} -ne 0 ]; then
      title "$nTEMPLATES:"
      for c in "${templs[@]}"; do
        if [ ${opts[long]+set} ]; then
          showTemplate "$c"
        else
          found "  - $c: (${TEMPLATES["$c"]})"
        fi
      done
    fi
    if [ ${#comps[@]} -ne 0 ]; then
      title "$nCOMPONENTS:"
      for c in "${comps[@]}"; do
        if [ ${opts[long]+set} ]; then
          showComponent "$c"
        else
          found "  - $c: (${COMPONENTS["$c"]})"
        fi
      done
    fi
    order=( )
    getOrder order "${comps[@]}"
    title "$nTOOL order: ${order[@]}"
  else
    if [ -n "$CURRENT" ]; then
      if [ ${opts[long]+set} ]; then
        showComponent "$COMPONENT" X
      else
        title "$nCOMPONENT: $COMPONENT (${COMPONENTS["$COMPONENT"]})"
      fi
    else
      if [ -n "$CURRENTTEMP" ]; then
        if [ ${opts[long]+set} ]; then
          showTemplate "$TEMPLATE" X
        else
          title "$nTEMPLATE: $TEMPLATE (${TEMPLATES["$TEMPLATE"]})"
        fi
      fi
    fi
  fi
}

CMD_order()
{
  local data="$(declare -p opts)"
  declare -A params
  eval "declare -A opts="${data#*=}
  params=( [d]=delete [m]=matching [a]=all [u]=update [A]=All )
  OPT_parse_options params opts "$@"
  shift $(( _cnt - 1 ))

  local opt=
  if [ ${opts[delete]+set} ]; then
    opt=-r
  fi
  if [ ${opts[update]+set} ]; then
    opt=-r
    opts[all]=x
  fi

  execClosure $opt _CMD_order "$@"
}

_CMD_order()
{
  for c in "${@}"; do
    if isDeployed "$c"; then
      if isError "$c"; then
        error "$c"
      else
        confirm "$c"
      fi
    else
        found "$c"
    fi
  done
}

CMD_show()
{
  local data=$(declare -p opts)
  declare -A params
  eval "declare -A opts="${data#*=}
  params=( [l]=long [m]=matching [a]=all [A]=All [t]=template )
  OPT_parse_options params opts "$@"
  shift $(( _cnt - 1 ))

  execClosure _CMD_show "$@"
}

_CMD_show()
{
  local comp
  local active
  local label
  local dep

  FAILED=
   for c in "$@"; do
     if [ ${opts[template]+set} ]; then
       showTemplate "$c" X
     else
       showComponent "$c" X
     fi
   done
}

CMD_generate()
{
  declare -A params=( [c]=component [p]=prepare [d]=deployment [P]=plugins [e]=export )
  declare -A tmpopts=( )

  OPT_parse_options params tmpopts "$@"
  shift $(( _cnt - 1 ))

  steps=( "${!tmpopts[@]}" )

  if [ ${#steps[@]} -eq 0 ]; then
    steps=( component prepare deployment )
  fi

  execClosure _CMD_generate "$@"
}

_CMD_generate()
{
  for c in "$@"; do
    confirm "**************************************************************"
    confirm "*** generating [$(join ", " "${steps[@]}")] for $nCOMPONENT $c"
    ACTION_execute "$c" action_deployment none "${steps[@]}"
    confirm "*** $nCOMPONENT $c done"
    confirm "**************************************************************"
  done
}

CMD_diff()
{
  declare -A params=( [d]=deployment [e]=export [s]=state )
  declare -A opts=( )
  OPT_parse_options params opts "$@"
  shift $(( _cnt - 1 ))

  execClosure _CMD_diff "$@"
}

_CMD_diff()
{
  for c in "$@"; do
    if [ ${opts[deployment]+set} ]; then
      _diff "$GEN" "$c" deployment.yaml
    fi
    if [ ${opts[export]+set} ]; then
      _diff "$EXPORT" "$c" export.yaml
    fi
    if [ ${opts[state]+set} ]; then
      _diff "$STATE" "$c" state.yaml
    fi
  done
}

_diff()
{
  if [ -f "$1/$2/$3.bak" ]; then
    title "Diff for $3 of $nCOMPONENT $2"
    spiff diff "$1/$2/$3" "$1/$2/$3.bak"
  else
    info "Nothing to compare for $3 of $nCOMPONENT $2"
  fi
}

CMD_deploy()
{
  local data="$(declare -p opts)"
  declare -A params
  eval "declare -A opts="${data#*=}
  params=( [m]=matching [a]=all [u]=update [A]=All [n]=new [parallel]="=" [force]="" )
  OPT_parse_options params opts "$@"
  shift $(( _cnt - 1 ))

  opt=
  if [ "${opts[update]+set}" ]; then
    opt="-r"
    opts[all]=x
  fi
  execClosure $opt _CMD_deploy "$@"
}

_CMD_deploy()
{
  unset todo
  declare -A todo
  for c in "$@"; do
    if isDeployed "$c"; then
      if ! isError "$c"; then
        if [ ${opts[new]+set} ]; then
          confirm "$nCOMPONENT $c already deployed"
          continue
        fi
      fi
    fi
    if [ $procs -le 1 ]; then
    __CMD_deploy "$c"
    else
      todo["$c"]=X
    fi
  done

  if [ $procs -gt 1 ]; then
    SCHEDULE_Execute --silent --ignore-unknown --logdir "$GEN" --jobkey component --processors $procs schedule_deploy
  fi
}

__CMD_deploy()
{
  confirm "*****************************"
  confirm "*** ${nTOOL}ing $nCOMPONENT $1"
  ACTION_execute "$1" action_deployment deploy  all
  local s=$?
  if [ $s -eq 0 ]; then
    confirm "*** $nCOMPONENT $1 deployed"
    confirm
  fi
  return $?
}

schedule_deploy()
{
  case "$1" in
    alljobs)      eval $2='( "${!todo[@]}" )';;
    dependencies) getMetaComponentImports $2 "$3";;
    function)     eval $2='( __CMD_deploy "$3" )';;
  esac
}

CMD_burndown()
{
  CMD_delete --force "$@"
}

CMD_delete()
{
  local data="$(declare -p opts)"
  declare -A params
  eval "declare -A opts="${data#*=}
  params=( [m]=matching [a]=all [A]=All [force]="" [parallel]="=" )
  OPT_parse_options params opts "$@"
  shift $(( _cnt - 1 ))

  if [ ${opts[force]+set} ]; then
    SOW_FORCE=X
  else
    SOW_FORCE=
  fi
  export SOW_FORCE

  execClosure -r _CMD_delete "$@"
}

_CMD_delete()
{
  declare -A todo=( )
  if [ $procs -gt 1 ]; then
    addHashed todo "$@"
    SCHEDULE_Execute --ignore-unknown --logdir "$GEN" --jobkey component --processors $procs schedule_delete
  else
    for c in "$@"; do
      __CMD_delete "$c"
    done
  fi
}

schedule_delete()
{
  case "$1" in
    alljobs)      eval $2='( "${!todo[@]}" )';;
    dependencies) getMetaComponentUsedby $2 "$3";;
    function)     eval $2='( __CMD_delete "$3" )';;
  esac
}

__CMD_delete()
{
  confirm "*****************************"
  confirm "*** deleting $nCOMPONENT $1"
  ACTION_execute "$1" action_deployment delete all
  confirm "*** $nCOMPONENT $1 deleted"
  confirm
}

getOrder()
{
  local order_field=order
  if [ "$1" = -r ]; then
    order_field=usedorder
    shift
  fi

  if [ $# -eq 1 ]; then
    getValueList $1 $order_field METAJSON
  else
    local _order=( )
    for c in "${@:2}"; do
      local _tmp=( )
      getValueList _tmp "closures[\"$c\"].$order_field" METAJSON
      _order=( "${_order[@]}" "${_tmp[@]}" )
    done
    setUniq $1 "${_order[@]}"
  fi
}

orderComps()
{
  local order_field=order
  if [ "$1" = -r ]; then
    order_field=usedorder
    shift
  fi

  local a=( )
  eval $1="( )"
  getValueList a $order_field METAJSON
  for c in "${a[@]}"; do
    if contains "$c" "$@"; then
      eval $1="( \"\${$1[@]}\" \"$c\" )"
    fi
  done
}

execClosure()
{
  local opt=
  local comps=( )
  local order_field=order
  if [ "$1" = -r ]; then
    opt=-r
    order_field=usedorder
    shift
  fi

  local procs="${opts[parallel]}"
  if [ -z "$procs" ]; then
    procs=1
  else
    if ! [[ "$procs" =~ ^[0-9]+$ ]] ; then
       error "option --parallel must be a number"
    fi
  fi
  if [ $# -ne 1 ]; then
    if [ ${opts[template]+set} ]; then
      resolveTemplates comps "${@:2}"
    else
      resolveComponents comps "${@:2}"
    fi
  else
    if [ -n "$CURRENTTEMP" ]; then
      opts[template]=X
    fi
    if [ ${opts[All]+set} ]; then
      comps=( )
    else
      if [ ${opts[template]+set} ]; then
        resolveTemplates comps .
      else
        resolveComponents comps .
      fi
    fi
  fi

  if [ ${opts[template]+set} ]; then
    order=( "${comps[@]}" )
  else
    if [ ${opts[all]+set} ] || [ ${opts[All]+set} ]; then
      getOrder $opt order "${comps[@]}"
    else
      local tmp=( )
      orderComps $opt order "${comps[@]}"
    fi
  fi

  $1 "${order[@]}"
}


# $1: var
# $2+: specs
resolveComponents()
{
  _resolveElements lookupComponents  $nCOMPONENT "${@}"
}

# $1: var
# $2+: specs
resolveTemplates()
{
  _resolveElements lookupTemplates  $nTEMPLATE "${@}"
}

# $1: lookup func
# $2: kind name
# $3: var
# $4+: specs
_resolveElements()
{
  local var="$3"
  local s
  local c

  local __comps=( )
  local _found=( )

  wild=""
  for s in "${@:4}"; do
     $1 _found "$s"
     if [ ${#_found[@]} -eq 0 ]; then
       if [ "$s" = . ]; then
         if [ "${opts[match]+set}" ]; then
           fail "not in a $2 or $nPRODUCT folder"
         else
           fail "no $2 found"
         fi
       else
         fail "unknown $2 $s"
       fi
     else
       if [ ${#f_found[@]} -gt 1 ]; then
         wild=x
       fi
       __comps=( "${__comps[@]}" "${_found[@]}" )
     fi
  done
  eval "$var=( \"\${__comps[@]}\" )"
}

CMD_edit()
{
  CMD_vi "$@"
}

CMD_vi()
{
  declare -A params
  params=( [c]="=component" [e]=export [s]=state [g]=gen [l]=local [r]=root [p]=product [L]=)
  OPT_parse_options params opts "$@"
  shift $(( _cnt - 1 ))

  local comp="${opts[component]}"
  if [ -z "$comp" ]; then
    if [ -z "$COMPONENT" ]; then
      fail "no $nCOMPONENT specified"
    fi
    comp="$COMPONENT"
  fi

  ACTION_execute "$comp" action_edit "$@"
}

action_edit()
{
  if [ -z "$EDITOR" ]; then
    EDITOR=vi
  fi

  local search=( )
  for o in "${!opts[@]}"; do
    case "$o" in
      export)     search=( "${search[@]}" "$EXPORTDIR" );;
      state)      search=( "${search[@]}" "$STATEDIR" );;
      gen)        search=( "${search[@]}" "$GENDIR" );;
      local)      search=( "${search[@]}" "$CURRENT" );;
      root)       search=( "${search[@]}" "$ROOT" );;
      product)    search=( "${search[@]}" "$PRODUCTDIR" );;
    esac
  done
  if [ ${#search[@]} -eq 0 ]; then
    search=( "$PRODUCTROOT" "$ROOTPRODUCTDIR" "$GENDIR" "$STATEDIR" "$EXPORTDIR" )
  fi

  for f in "$@"; do
    file="$(lookupFileIn "$f" "${search[@]}" )"
    if [ -z "$file" ]; then
      fail "$f not found for $nCOMPONENT $comp"
    fi
    if [ "${opts[L]+set}" ]; then
       echo "$file"
    else
      "$EDITOR" "$file"
    fi
  done
}

CMD_add()
{
  params=( [p]=$nProduct [t]=template )
  declare -A opts=( )
  OPT_parse_options params opts "$@"
  shift $(( _cnt - 1 ))

  local productdir="$PRODUCTDIR"
  local product="$PRODUCT"
  if [ -n "${opts[$nPRODUCT]}" ]; then
    product="$(CMDS_resolve_shortcut "${opts[$nPRODUCT]}" "${!PRODUCTS[@]}")"
    productdir="${PRODUCTS[$product]}"
    if [ -z "$productdir" ]; then
      fail "unknown $nPRODUCT ${opts[$nPRODUCT]}"
    fi
    productdir="$ROOT/$productdir"
  fi
  if [ -z "$productdir" ]; then
    fail "please select a $nPRODUCT"
  fi

  local func=_add_component
  local kind=$nCOMPONENT

  if [ ${opts[template]+set} ]; then
    func=_add_template
    kind=$nTEMPLATE
  fi

  if [ $# -eq 0 ]; then
      fail "$kind name required"
  fi
  for c in "$@"; do
    $func "$c"
  done
}

_add_component()
{ local c="$1"

  COMPDIR="$productdir/$dCOMPONENTS/$c"

  if [ -n "${COMPONENTS["$c"]}" ]; then
      fail "$nCOMPONENT $c already exists"
  fi
  if [ -d "$COMPDIR" ]; then
      fail "folder for $nCOMPONENT $c already exists"
  fi

  confirm "creating $nCOMPONENT $c in $nPRODUCT $product"

  mkdir -p "$COMPDIR/lib"
  cat <<EOF >"$COMPDIR/action"
#
# remove this file if no dedicated deploy or delete code
# is required
#
deploy()
{
  true
}

delete()
{
  true
}
EOF
  cat <<EOF > "$COMPDIR/$fCOMPDEF"
---
component:
  imports: []

  stubs: []
EOF
  cat <<EOF > "$COMPDIR/deployment.yaml"
---
imports: (( &temporary ))

plugins:

state:
  <<: (( &state(merge none) ))

EOF
  echo "---" > "$COMPDIR/export.yaml"
}

_add_template()
{ local c="$1"

  TEMPDIR="$productdir/$dTEMPLATES/$c"

  if [ -n "${TEMPLATES["$c"]}" ]; then
      fail "$nTEMPLATE $c already exists"
  fi
  if [ -d "$TEMPDIR" ]; then
      fail "folder for $nTEMPLATE $c already exists"
  fi

  confirm "creating $nTEMPLATE $c in $nPRODUCT $product"

  mkdir -p "$TEMPDIR/lib"
  cat <<EOF >"$TEMPDIR/action"
#
# remove this file if no dedicated deploy or delete code
# is required
#
deploy()
{
  true
}

delete()
{
  true
}
EOF
  cat <<EOF > "$TEMPDIR/$fTEMPDEF"
---
template:
  stubs: []
EOF
  cat <<EOF > "$TEMPDIR/deployment.yaml"
---
imports: (( &temporary ))

plugins:

state:
  <<: (( &state(merge none) ))

EOF
  echo "---" > "$TEMPDIR/export.yaml"
}

###########################################################################
# main
###########################################################################


if [ ${opts[version]+set} ]; then
  get_version
  exit 0
fi

if [ ${opts[keep]+set} ]; then
  KEEP_TEMPFILES=X
else
  KEEP_TEMPFILES=
fi
if [ ${opts[debug]+set} ]; then
  DEBUG=X
else
  DEBUG=
fi
if [ ${opts[verbose]+set} ]; then
  debug enable verbose
  VERBOSE=X
else
  VERBOSE=
fi
if [ ${opts[dryrun]+set} ]; then
  debug enable dryrun
  DRYRUN=X
else
  DRYRUN=
fi

if [ ${opts[stacktrace]+set} ]; then
  debug enable stacktrace
  export STACKTRACE=x
fi

export DRYRUN
export DEBUG
export KEEP_TEMPFILES
export VERBOSE

source "$SOWLIB/env"
source "$SOWLIB/action"


CMDS=( deploy delete burndown info show help version generate vi add diff )
add_functions CMDS CMD_

cmd="$(CMDS_resolve_shortcut "$1" "${CMDS[@]}")"

verbose "$nLANDSCAPE = $ROOT"
verbose "$nLANDSCAPE $nPRODUCT = $ROOTPRODUCTDIR"
if [ -n "$PRODUCT" ]; then
  verbose "$nPRODUCT = $PRODUCT"
  if [ -n "$COMPONENT" ]; then
    verbose "$nCOMPONENT = $COMPONENT"
    reldir="${CURRENT#$ROOT/}"
    verbose "$nCOMPONENT dir = $CURRENT ($reldir)"
  fi
fi

TRACE=
if [ ${opts[trace]+set} ]; then
  TRACE=X
  set -x
fi
export TRACE

setupLandscape

CMDS_execute_command --invalid=handle_action_command "$cmd" CMD_ "${CMDS[*]}" "${@:2}"

