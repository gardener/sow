#!/usr/bin/env bash
#
# Copyright 2019 Copyright (c) 2019 SAP SE or an SAP affiliate company. All rights reserved. This file is licensed under the Apache Software License, v. 2 except as noted otherwise in the LICENSE file.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

set -e

source "$SOWLIB/pluginutils"

jq .values <<< "$PLUGINCONFIGJSON" > "$dir/terraform.tfvars.json"

getValue source source PLUGINCONFIGJSON
getJSON main main PLUGINCONFIGJSON

src="$CURRENT/$PLUGININSTANCE"

if [ -z "$source" -a -z "$main" ]; then
  source="$PLUGININSTANCE"
fi
if [ -n "$main" ]; then
  if [ -n "$source" ]; then
    fail "either a source folder (source) or a direct content (main) must be specified in plugin config"
  fi
  source="$dir/main"
  mkdir -p "$source"
  echo "$main" > "$source/main.tf.json"
  if [ -d "$src/modules" ]; then
    ln -s "$src/modules" "$source"
  else 
    if [ -d "$CURRENT/modules" ]; then
      if [ ! -h "$source/modules" ]; then
        ln -s "$CURRENT/modules" "$source"
      fi
    fi
  fi
else
   if ! isAbsolutePath "$source"; then
     if [ -d "$src/$source" ]; then
       source="$src/$source"
     else
       source="$CURRENT/$source"
     fi
   fi
fi
  

deploy() {
    info "project is $source"
    (
        cd "$dir"
        exec_cmd terraform init "$source"
        exec_cmd terraform apply -auto-approve -var-file="$dir/terraform.tfvars.json" -state="$state/terraform.tfstate" "$source"
    )
}

delete() {
    if [ -f "$state/terraform.tfstate" ]; then
        (
            cd "$dir"
            exec_cmd terraform init "$source"
            exec_cmd terraform destroy -force -var-file="$dir/terraform.tfvars.json" -state="$state/terraform.tfstate" "$source"
        )
    fi
}

case "$1" in
    deploy) deploy "$@";;
    delete) delete "$@";;
    *) fail "unsupported action $1"
esac
