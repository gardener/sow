#!/usr/bin/env bash
#
# SPDX-FileCopyrightText: 2024 SAP SE or an SAP affiliate company and Gardener contributors
#
# SPDX-License-Identifier: Apache-2.0



#
# run a command in background
# the command will be stopped and restarted if the command or its
# arguments are changed
#
# if the command stops on its own, it is not automatically be restarted.
# to restart it, the component must be redeployed.
#
# The following configuration parameter are supported:
#
# command:     the command to be executed given by name or path
# environment: a map of environment variables to set for the command execution
# arguments:   a list of arguments to call the command with
# properties:  a map of substitutions applied to the given arguments prior to 
#              calling the command
# startupTime  time in seconds to wait to figure out whether command started
#              or failed
#

set -e

source "$SOWLIB/pluginutils"

subst()
{
  echo "${1/$2/$3}"
}

STATEFILE="$STATEDIR/state.json"
state=""
if [ -f "$STATEFILE" ]; then
  state="$(cat "$STATEFILE")"
fi

declare -A env
declare -A props
args=( )
cmd=
getRequiredValue cmd command PLUGINCONFIGJSON
getValue startup startupTime PLUGINCONFIGJSON
getValueMap env environment PLUGINCONFIGJSON
getValueMap props properties PLUGINCONFIGJSON
getValueList args arguments PLUGINCONFIGJSON

if [ -z "${startup## }" ]; then
  startup=2
fi
if [ ${#props[@]} -gt 0 ]; then
  for a in "${!args[@]}"; do
    for k in "${!props[@]}"; do
      args[$a]="$(subst "${args[$a]}" "$k" "${props[$k]}")"
    done
  done

  for a in "${!env[@]}"; do
    for k in "${!props[@]}"; do
      env[$a]="$(subst "${env[$a]}" "$k" "${props[$k]}")"
    done
  done
fi




hashCommand()
{
  if [ ! -f "$cmd" ]; then
    file="$(which "$cmd" || true)"
    if [ -z "$file" ]; then
      fail "command $cmd not found"
    else
      cmd="$file"
    fi
  fi
  if [ ! -f "$cmd" ]; then
    fail "command $cmd not executable"
  fi

  read a b <<<"$(md5sum -b "$cmd")"

  local __data
  local __field
  jsonAddString __data "command" "$a"

  keys=( $( echo ${!env[@]} | tr ' ' $'\n' | sort ) )
  for k in "${keys[@]}"; do
    jsonAddString __field "$k" "${env[$k]}"
  done
  jsonAdd __data "environment" "{ $__field }"

  __field=
  for a in "${args[@]}"; do
    jsonAddString __field "$a"
  done
  jsonAdd __data "arguments" "{ $__field }"

  read a b <<<"$(echo "$__data" | md5sum)"
  verbose "execution hash: $a"
  eval $1='"'"$a"'"'
}

stopRunner()
{
  local hash
  local pid
  if [ -n "$state" ]; then
    verbose "found state $state"
    getValue hash hash state
    verbose "old state=$hash (required $1)"
    if [ -z "$1" -o "$hash" != "$1" ]; then
       if [ -n "$1" ]; then
         verbose "hash mismatch -> old needs to be stopped"
       fi
       getValue pid pid state
       verbose "old pid=$pid"
       if [ -n "$pid" ] && kill -0 $pid; then
         info "stopping runner instance $PLUGININSTANCE ($pid)"
         killpg -9 $pid
         echo >"$STATEFILE"
         state=
       fi
    fi
  fi
}

startRunner()
{
  local hash
  if [ -n "$state" ]; then
    getValue hash hash state
    if [ "$hash" == "$1" ]; then
       getValue pid pid state
       if [ -n "$pid" ]; then
         if kill -0 $pid 2>/dev/null; then
           info "instance $PLUGININSTANCE still running with pid $pid"
           return
         else
           info "instance $PLUGININSTANCE should be running with pid $pid, but has stoped"
         fi
       fi
    fi
  fi

  info "starting runner $cmd ($1)"
  (
    for k in "${!env[@]}"; do
      export $k="${env[$k]}"
    done
    "$cmd" "${args[@]}" >"$dir/log" 2>&1 || {
       echo "$cmd: execution failed"
    }
    echo >"$STATEFILE"
  )&
  pid=$!
  # check for startup seconds for failing command execution
  verbose "startup time to check successful execution is $startup seconds"
  while (( startup >= 0 )); do
    if ! kill -0 $pid 2>/dev/null; then
      cat "$dir/log"
      fail "command execution failed"
    fi
    if (( startup-- > 0 )); then
      sleep 1
    fi
  done
  info "pid for instance $PLUGININSTANCE is $pid"
  hint "command log can be found at '$dir/log'"
  local __data
  jsonAddString __data pid "$pid"
  jsonAddString __data hash "$1"
  echo "{ $__data }" > "$STATEFILE"
}

deploy()
{
  local hash
  local msg
  msg=environment:
  for k in "${!env[@]}"; do
    header_message msg verbose
    verbose "$k=${env[$k]}"
  done

  msg=arguments:
  for a in "${args[@]}"; do
    header_message msg verbose
    verbose "- $a"
  done

  hashCommand hash
  stopRunner "$hash"
  startRunner "$hash"
}

delete() {
  stopRunner
}

case "$1" in
    deploy) deploy "$@";;
    delete) delete "$@";;
    *) fail "unsupported action $1"
esac
