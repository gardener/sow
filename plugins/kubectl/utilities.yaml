# Copyright 2019 Copyright (c) 2019 SAP SE or an SAP affiliate company. All rights reserved. This file is licensed under the Apache Software License, v. 2 except as noted otherwise in the LICENSE file.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

env:

utilities:
  <<: (( &temporary(merge || ~) ))
  kubectl:
    templates:
      kubectl_get:
      - <<: (( &template ))
      - kubectl
      - "--kubeconfig"
      - (( lookup_file(k,_.env.ROOTDIR).[0] || tempfile(k) ))
      - "-n"
      - (( namespace || landscape.namespace ))
      - get
      - (( t ))
      - (( o ))
      - "-o"
      - "yaml"
      kubectl_getfield:
      - <<: (( &template ))
      - kubectl
      - "--kubeconfig"
      - (( lookup_file(k,_.env.ROOTDIR).[0] || tempfile(k) ))
      - "-n"
      - (( namespace || landscape.namespace ))
      - get
      - (( t ))
      - (( o ))
      - "-o"
      - (( "jsonpath=" p "" ))

      kubectl:
        <<: (( &template ))
        kubeconfig: (( config ))
        manifests: (( read(file, "importmulti") ))
        values: (( &temporary(settings) ))
    
      kubeconfig:
        <<: (( &template ))
        apiVersion: v1  
        kind: Config
        current-context: (( values.username ))
        contexts:
        - context:
            cluster: current
            user: (( values.username ))
          name: (( values.username ))
        clusters:
        - cluster:
            certificate-authority-data: (( base64(values.cacert) ))
            server: (( values.apiServerUrl ))
          name: current
        users:
        - name: (( values.username))
          user: (( { "token" = values.token } || { "client-certificate-data" = base64(values.cert), "client-key-data" = base64(values.key) } ))

    kubeconfig: (( lambda |values|-> *_.templates.kubeconfig ))

    generate: (( lambda |file,config,settings|->*_.templates.kubectl ))

    getField: (( |k,t,o,p|->exec(*_.templates.kubectl_getfield) ))
    getFieldUncached: (( |k,t,o,p|->exec_uncached(*_.templates.kubectl_getfield) ))
    get: (( |k,t,o|->exec(*_.templates.kubectl_get) ))
    getUncached: (( |k,t,o|->exec_uncached(*_.templates.kubectl_get) ))
