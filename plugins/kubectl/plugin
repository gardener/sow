#!/usr/bin/env bash
#
# Copyright 2019 Copyright (c) 2019 SAP SE or an SAP affiliate company. All rights reserved. This file is licensed under the Apache Software License, v. 2 except as noted otherwise in the LICENSE file.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

source "$SOWLIB/pluginutils"

manifestdir="$dir/manifests"
mkdir -p "$manifestdir"

loadHandlers()
{
  local d
  local h
  for d in "$@"; do
    if [ -n "$d" -a -d "$d/handlers" ]; then
      for h in "$d/handlers"/*; do
        if [ -f "$h" ]; then
          source "$h"
        fi
      done
    fi
  done
}

loadHandlers "$PLUGIN" "$CURRENT/lib/kubectl" "$PRODUCTDIR/lib/kubectl" "$SOW_HOME"

for h in "${@:3}"; do
  verbose "loading handler $h"
  f="$(lookupFile "$h")"
  if [ -n "$f" ]; then
    source "$f"
  else
    fail "handler plugin '$j' not found"
  fi
done

DEFKUBE=( )
getJSONList MANIFESTS "" PLUGINCONFIGJSON

LEN="${#MANIFESTS[@]}"

if [ $LEN -eq 0 ]; then
  info no manifests found
fi

cmd_echo()
{
  echo "$@"
}

setKubeConfig()
{
  if [ $1 = value ]; then
    local kubeconfig
    if [[ "$2" != /* ]]; then
      kubeconfig="$ROOT/$2"
    else
      kubeconfig="$2"
    fi
    cp "$kubeconfig" "$3"
    verbose "    using $kubeconfig"
  else
    echo "$2" > "$3"
    verbose "    using inline kubeconfig"
  fi
}

# $1: action
# $2: kubeconfig file
# $3: manifest file
# $4: retry attempts (defaults to 1)
# $5: retry waiting time in seconds (defaults to 10)
exec_action()
{
  local name
  local namespace
  local kind
  local apiversion
  local objectkey
  local objectentry
  local res

  getManifestInfo "$(spiff merge --json "$3")"

  local group="${apiversion%/*}"
  local suf
  local ns
  if [ "$group" = "$apiversion" ]; then
    suf=
    group=core
  else
    suf=".$group"
  fi
  if [ -n "$namespace" ]; then
    ns="-n $namespace"
  else
    ns=
  fi
  if [ "$1" = "delete" ]; then
    res="$(kubectl --kubeconfig "$2" $ns get "$kind$suf" --field-selector "metadata.name=$name" -o jsonpath={.items})"
    if [ "$res" = '[]' ]; then
      info "$kind $1 ($2) already deleted"
      return
    fi
  fi
  local f="action_${1}_${kind}_${group//\./_}"
  if _is_function "$f"; then
    verbose "    using handler $f"
    $f "$name" "$namespace" "$2" "$3"
  else
    local attempts=${4:-""}
    local backoff=${5:-""}
    if [ -z "$attempts" ]; then
      attempts=5
    fi
    if [ -z "$backoff" ]; then
      backoff=15
    fi
    case "$1" in
      deploy)
        while true; do
          if exec_cmd kubectl --kubeconfig "$2" apply -f "$3" ; then
            break
          else
            attempts=$(( attempts - 1 ))
            if [[ $attempts -gt 0 ]]; then
              info "command failed, waiting for $backoff seconds and trying again ($attempts times)"
              sleep $backoff
            else
              fail "kubectl command failed and retry limit reached"
            fi
          fi
        done
        ;;
      delete)
        while true; do
          if exec_cmd kubectl --kubeconfig "$2" delete -f "$3" ; then
            break
          else
            attempts=$(( attempts - 1 ))
            if [[ $attempts -gt 0 ]]; then
              info "command failed, waiting for $backoff seconds and trying again ($attempts times)"
              sleep $backoff
            else
              fail "kubectl command failed and retry limit reached"
            fi
          fi
        done
        ;;
    esac
  fi
}

exec_manifest()
{
  local cmd="$1"
  local type="$2"
  local kube="$3"
  local index="$4"
  local manifest="$5"
  local retry_attempts="$6"
  local retry_wait="$7"

  local kubeconfig="$TMP_KUBECONFIG"
  setKubeConfig "$type" "$kube" "$kubeconfig"
  api="$(getAPIServer "$kubeconfig")"
  ord="${#executed["$api"]}"

  getManifestInfo "$manifest" "entry $index" "$ord"

  local base
  if [ -n "$namespace" ]; then
    found "manifest for $kind($apiversion): $namespace/$name"
    base="$manifestdir/$index-$kind.$namespace.$name"
  else
    found "manifest for $kind($apiversion): $name"
    base="$manifestdir/$index-$kind.$name"
  fi

  local file="$base.yaml"

  if [ "$cmd" == deploy ]; then
    echo "$manifest" | spiff merge - >"$file"
    exec_action "$cmd" "$kubeconfig" "$file" "$retry_attempts" "$retry_wait"
    setjsonvalue deployed 'clusters["'$api'"].kubeconfig' "$(cat "$kubeconfig")"
    setjsonjson deployed 'clusters["'$api'"].manifests["'$objectkey'"]' "$objectentry"
    executed["$api"]="${executed["$api"]} $objectkey"
  else
    if [ -f "$file" ]; then
      exec_action "$cmd" "$kubeconfig" "$file" "$retry_attempts" "$retry_wait"
      deljsonkey deployed 'clusters["'$api'"].manifests["'$objectkey'"]'
    fi
  fi
}

TMP_KUBECONFIG="$dir/kubeconfig.tmp"
TMP_MANIFEST="$dir/manifest.tmp"

cleanup_deployments()
{
  local apis
  local val
  getJSON val "clusters" deployed
  if [ -z "$val" ]; then
    return
  fi
  getKeys apis "clusters" deployed
  for api in "${apis[@]}"; do
    local keys
    getKeys keys 'clusters["'"$api"'"].manifests' deployed
    local kubeconfig
    local cur=( ${executed[$api]} )
    getValue kubeconfig 'clusters["'"$api"'"].kubeconfig' deployed
    echo "$kubeconfig" >"$TMP_KUBECONFIG"
    info "cluster $api"
    found "  found deployed objects: ${#keys[@]}"
    found "  found currect objects: ${#cur[@]}"
    declare -A obsolete ords names
    local ordered=( )

    for key in "${keys[@]}"; do
      if ! contains "$key" "${cur[@]}"; then
        local objectentry
        getJSON objectentry 'clusters["'"$api"'"].manifests["'"$key"'"]' deployed
        getManifestInfoFromEntry

        if [ -n "$namespace" ]; then
          names[$key]="$kind($apiversion): $namespace/$name"
        else
          names[$key]="$kind($apiversion): $name"
        fi

        if [ -z "$ord" ]; then
          ord=0
        fi
        obsolete[$key]="$manifest"
        ords[$key]="$ord"
        local new=( )
        local found=
        for k in "${ordered[@]}"; do
          if [ -z "$found" -a ${ords[$k]} -lt $ord ]; then
            new=( "${new[@]}" "$key" )
            found=X
          fi
          new=( "${new[@]}" "$k" )
        done
        if [ -z "$found" ]; then
          ordered=( "${new[@]}" "$key" )
        else
          ordered=( "${new[@]}" )
        fi
      fi
    done

    if [ ${#ordered[@]} -gt 0 ]; then
      info "  found deployed obsolete objects: ${#ordered[@]}"
      for key in "${ordered[@]}"; do
        echo "${obsolete[$key]}" > "$TMP_MANIFEST"
        found "    ${names[$key]}"
        exec_action delete  "$TMP_KUBECONFIG" "$TMP_MANIFEST"
        deljsonkey deployed 'clusters["'"$api"'"].manifests["'"$key"'"]'
      done
    fi
    getKeys keys 'clusters["'"$api"'"].manifests' deployed
    if [ ${#keys[@]} -eq 0 ]; then
      deljsonkey deployed 'clusters["'"$api"'"]'
    fi
  done
}

save()
{
  x=$?
  if [ $x -ne 0 ]; then
    handle_error $x
  fi
  if [ -n "$deployed" ]; then
    if [ -z "$DRYRUN" ]; then
      if [ -f "$state/deployed.json" ]; then
        mv "$state/deployed.json" "$state/deployed.json.bak"
      fi
      echo "$deployed" > "$state/deployed.json"
      deployed=""
    fi
  fi
  if [ -z "$KEEP_TEMPFILES" ]; then
    rm -f "$TMP_KUBECONFIG" "$TMP_MANIFEST"
  fi
}

execute_manifest()
{
  exec_manifest $1 "${kube[@]}" "$i-$2" "$3" "$4" "$5"
}

execute_file()
{
  local j="$2"
  local f="$3"
  local file

  file="$(lookupFile "$f")"
  if [ -z "$file" ]; then
    fail "entry $i:$j: $f not found"
  fi
  while IFS= read -r line; do
    exec_manifest $1 "${kube[@]}" "$i-$j" "$line" "$4" "$5"
  done < <(spiff merge --json "$file" | $order)
}

execute_entry()
{
  local i=$2
  local entry="$3"
  local nested

  getValueOrJSON kube kubeconfig entry
  if [ ${#kube[@]} -eq 0 ]; then
    kube=( "${DEFKUBE[@]}" )
  else
    nested=X
  fi
  if [ ${#kube[@]} -eq 0 -o -z "${kube[1]}" ]; then
    fail no or empty kubeconfig configured
  fi

  getValue retry_attempts "retry.attempts" entry
  getValue retry_wait "retry.wait" entry
  getJSONList manifests manifests entry
  if [ ${#manifests[@]} -ne 0 ]; then
    executionLoop "$1" manifests execute_manifest "$retry_attempts" "$retry_wait"
  else
    getValueList files files entry
    getValueList args command entry
    if [ ${#files[@]} -ne 0 ]; then
      if [ ${#args[@]} -ne 0 ]; then
        fail "entry $i: only files or command possible"
      fi
      executionLoop "$1" files execute_file "$retry_attempts" "$retry_wait"
    elif [ ${#args[@]} -ne 0 ]; then
      found "command: ${#args[@]}: ${args[@]}"
      if _is_function "cmd_${args[0]}"; then
         "cmd_${args[0]}" "$1" "${args[@]:1}"
      else
        fail "entry $i: command ${args[0]} not supported by kubectl plugin"
      fi
    elif [ -z "$nested" ]; then
        exec_manifest $1 "${kube[@]}" "$i" "$entry"
    else
      getJSON tmpf files entry
      getJSON tmpc command entry
      if [ -z "$tmpf$tmpc" ]; then
        fail "entry $i: kubeconfig option must be combined with manifests or command option"
      fi
    fi
  fi
}

execute()
{
  trap save EXIT ERR 2
  declare -A executed
  deployed="{}"
  if [ -f "$state/deployed.json" ]; then
    deployed="$(cat "$state/deployed.json")"
  fi
  executionLoop "$1" MANIFESTS execute_entry a
  cleanup_deployments
  save
}

deploy() {
  execute deploy "$@"
}

delete() {
  execute delete "$@"
}

case "$1" in
    deploy) deploy "${@:1}";;
    delete) delete "${@:1}";;
    *) fail "unsupported action $1"
esac
