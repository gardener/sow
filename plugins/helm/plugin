#!/bin/bash -e
#
# Copyright 2019 Copyright (c) 2019 SAP SE or an SAP affiliate company. All rights reserved. This file is licensed under the Apache Software License, v. 2 except as noted otherwise in the LICENSE file.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

source "$SOWLIB/pluginutils"
source "$SOWLIB/k8s"

set -eo pipefail

K8S_setKubeConfig "$PLUGININSTANCE" "$dir/kubeconfig"

jq .values <<< "$PLUGINCONFIGJSON" > "$dir/values.json"

getRequiredValue "source" "source" PLUGINCONFIGJSON
getRequiredValue name "name" PLUGINCONFIGJSON
getRequiredValue namespace "namespace" PLUGINCONFIGJSON
getValue command "command" PLUGINCONFIGJSON
getValueList helm_flags_deploy "flags.deploy" PLUGINCONFIGJSON
getValueList helm_flags_delete "flags.delete" PLUGINCONFIGJSON

if [ -z "$command" ]; then
  command="${3:-"upgrade"}"
fi

# Writes from stdin to file
dump() {
    if [ -z ${1:-""} ]; then
        fail "dump: no path given!"
    fi
    cat > "$1"
}

src="$(lookupFile -d "$source")"
if [ -z "$src" ]; then
    if [ -f "$source" ]; then
        src="$source"
    else
        fail "helm source '$source' not found"
    fi
fi

deploy() {
    info "Running helm $command for $name ..."
    case "$command" in
        upgrade)
            exec_cmd helm upgrade --install --force --wait $name \
                --kubeconfig "$KUBECONFIG" \
                --values "$dir/values.json" \
                --namespace $namespace \
                $(echo "${helm_flags_deploy[@]}") \
                "$src"
            ;;
        template)
            cmd="helm template --name $name --kubeconfig \"$KUBECONFIG\" --values \"$dir/values.json\" --namespace $namespace $(echo "${helm_flags_deploy[@]}") \"$src\""
            if [ -n "$VERBOSE" ]; then
                # workaround - exec_cmd can't be used since it uses 'echo' (in verbose mode), which interferes with the pipe.
                echo "$cmd"
            fi
            eval $(echo "$cmd") | dump "$dir/rendered_charts.yaml"
            ;;
        *)
            fail "unknown command for helm: '$command'"
            ;;
    esac
}

delete() {
    case "$command" in
        upgrade)
            info "Deleting helm deployment for $name"
            tmp="/tmp/helmplugin$$"
            exec_cmd helm delete \
                --kubeconfig "$KUBECONFIG" \
                --purge \
                $name \
                $(echo "${helm_flags_delete[@]}") 2>"$tmp" || {
                    error="$(cat "$tmp")"
                    if [ "$error" != "Error: release: \"$name\" not found" ]; then
                        rm -f "$tmp"
                        fail "$error"
                    else
                        info "release $name already deleted"
                    fi
                }
                rm -f "$tmp"
            ;;
        template)
            ;;
        *)
            fail "unknown command for helm: '$command'"
            ;;
    esac
}

case "$1" in
    deploy) deploy "$@";;
    delete) delete "$@";;
    *) fail "unsupported action $1"
esac
