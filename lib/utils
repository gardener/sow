#!/usr/bin/env bash
#
# Copyright 2019 Copyright (c) 2019 SAP SE or an SAP affiliate company. All rights reserved. This file is licensed under the Apache Software License, v. 2 except as noted otherwise in the LICENSE file.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

set -e

source "$SOWLIB/stdio"

################################################################################
# standard error handling
################################################################################

errorHandler=( )

TMP_NAME=/tmp/sow$$-

declare -Ag cleanup_handlers

handle_error()
{
  x=${1:-$?}
  if [ ${#errorHandler[@]} -ne 0 ]; then
    "${errorHandler[@]}"
  fi

  set +x
  if [ -n "$STACKTRACE" ]; then
    warn "ERRCODE $x (subshell $BASH_SUBSHELL) INTEND=$INTENDED_EXIT"
  fi
  if [ -z "$SOWID" -o ! -f "$SOWID" ]; then
    if [ $x -ne 0 -a -n "$STACKTRACE" -a \( -z "$INTENDED_EXIT" -o -n "$DEBUG" \) ]; then
        print_stacktrace 1
        if [ -n "$SOWID" ]; then
          touch "$SOWID"
        fi
    else
      if [ "$BASH_SUBSHELL" = "0"  ]; then
        if [ -n "$SOWID" ]; then
          rm -f "$SOWID"
        fi
      fi
    fi
    INTENDED_EXIT=X
    DEBUG=
  fi

  if [ "$BASH_SUBSHELL" = "0" ] && [ -n ${INSTALLATION_HANDLER:-""} ]; then
    if [ ! -x "$INSTALLATION_HANDLER" ]; then
      fail "no executable installation handler script found at '$INSTALLATION_HANDLER'"
    fi
    exec_cmd "$INSTALLATION_HANDLER" finalize "$INSTALLATION_HANDLER_CONFIG"
  fi
  rm -f "${TMP_NAME}"*
  
  local h
  for h in "${!cleanup_handlers[@]}"; do
    local p="$(expr "$h" : '.*-\([0-9]*\)')"
    if [ -n "$p" ]; then
      if [ $p -ne $BASHPID ]; then
        continue
      fi
      h="$(expr "$h" : '\(.*\)-[0-9]*')"
    fi
    $h
  done
}

addCleanupHandler()
{
  local h
  for h; do
    cleanup_handlers[$h]=$((cleanup_handlers[$h] + 1 ))
  done
}
addLocalCleanupHandler()
{
  local h
  for h; do
    if [ -z "${cleanup_handlers[$h]}" ]; then
      h="$h-$BASHPID"
    fi
    cleanup_handlers[$h]=$((cleanup_handlers[$h] + 1 ))
  done
}
_removeCleanupHandler()
{
  local h
  for h; do
    cleanup_handlers[$h]=$((cleanup_handlers[$h] - 1 ))
    if [ ${cleanup_handlers[$h]} -le 0 ]; then
      unset cleanup_handlers[$h]
    fi
  done
}
removeCleanupHandler()
{
  local h
  for h; do
    _removeCleanupHandler "$h" "$h-$BASHPID"
  done
}

StandardErrorHandling()
{
  if [ -n "$STACKTRACE" ]; then
    color_dark SUBSHELL$BASH_SUBSHELL
  fi
  if [ "$BASH_SUBSHELL" = "0" ]; then
    export "SOWID=/tmp/sowid=$$"
  fi
  set -e
  export INTENDED_EXIT=
  trap handle_error ERR EXIT
}

ExecuteInSubshell()
{
  (
    StandardErrorHandling
    trap handle_error ERR EXIT
    "$@"
  )
}

StandardErrorHandling

################################################################################
# standard utils
################################################################################

header_message()
{
  if [ -n "${!1}" ]; then
    info "${!1}"
    eval $1=
  fi
}

add_functions()
{
  local a
  local b
  local f
  local cmds
  while read a b f; do
    if [[ "$f" = ${2}* ]]; then
      f="${f#$2}"
      eval "cmds=( \"\${$1[@]}\" )"

      if ! contains "$f" "${cmds[@]}"; then
        eval "$1=( \"\${cmds[@]}\" \"$f\" )"
      fi
    fi
  done < <(typeset -F)
}
#
# print the actual stacktrace
# $1: number of omitted stack enries
# $2+ title
#
print_stacktrace()
{
  local i=1
  if [ -n "$1" ]; then
    i=$(($1+1))
  fi

  while [ $i -lt ${#BASH_SOURCE[@]} ]; do
    local line="${BASH_LINENO[$i-1]}"
    echo "${FUNCNAME[$i]} [${BASH_SOURCE[$i]}+$line]"
    i=$((i+1))
  done | (
    _start_color "${COLOR_RED}";
    echo "*** stack trace ${@:2}"
    echo "command: $BASH_COMMAND"
    column -t -s "  ";
    _end_color
  ) >&2
}

# $1: base dir
# $2: file/dir below base dir
rm_directory_and_cleanup_tree()
{
  if [ -z "$1" ]; then
    fail base directory missing
  fi
  if [[ "$2" != "$1"/* ]]; then
    fail "$2" is not below "$1"
  fi
  rm -rf "$2"
  find "$1" -type d -empty -delete
}

exec_cmd() {
  if [ -n "$DRYRUN" ]; then
    echo "$@"
  else
    if [ -n "$VERBOSE" ]; then
      echo "$@"
    fi
    "$@"
  fi
}

_is_function()
{
   [ "$(type -t "$1")" == function ]
}

#
# res: result associative array
# read successive lines with key and value
# and add to the associative array
_read_hash()
{
  local line
  hash=( )
  while  read -r label value; do
    if [ -n "$label" ]; then
      eval $1[\"\$label\"]=\"\$value\"
    fi
  done
}

contains()
{
  local i
  local elem="$1"
  shift
  for i in "$@"; do
    if [ "$i" == "$elem" ]; then
      return 0
    fi
  done
  return 1
}

trim()
{
  if [ $# -gt 0 ]; then
    trim <<<"$1"
  else
    sed -e 's/^\s*//' -e 's/\s*$//'
  fi
}

join() {
  local sep=$1 IFS=
  local ret=$2
  shift 2 || shift $(($#))
  ret+="${*/#/$sep}"
  echo "$ret"
}

setReverse()
{ 
  local a=( )
  local o
  for o in "${@:2}"; do
    a=( "$o" "${a[@]}" )   
  done
  eval "$1"="( \"\${a[@]}\" )"
}

setUniq()
{ local a=( )
  local v
  
  for v in "${@:2}"; do
    if ! contains "$v" "${a[@]}"; then
      a=( "${a[@]}" "$v" )
    fi
  done
  eval "$1"="( \"\${a[@]}\" )"
}

executionLoop()
{
  local cmd="$1"
  local var="$2"
  local _values=( )
  shift 2

  eval _values=( \"\${"$var[@]"}\" )

  local _i
  local _n=${#_values[@]}

  if [ $_n -eq 0 ]; then
    return
  fi
  for _i in $(seq 0 $((_n - 1))); do
    if [ "$cmd" == delete ]; then
      _i=$((_n - _i - 1))
      order=tac
    else
      order=cat
    fi
    "$1" "$cmd" $_i "${_values[$_i]}" "${@:2}"
  done
}

############################################################################
# yaml and json access
############################################################################

#
# get a value field from json
#
_jq_get_value()
{
  jq -r "($1)? // empty"
}

_jq_get_value_for_shell()
{
  jq -r "select($1 != null) | $1  | @sh"
}

# get second argument if first one not found
_jq_get_defaulted_value()
{
  jq -r '('$1') // "'$2'"'
}

# get second argument shell-escaped, if first one not found
_jq_get_defaulted_value_for_shell()
{
  jq -r '(('$1') // "'$2'" ) | @sh'
}

_jq_get_json()
{
  jq -r "(($1) // empty) | tojson"
}

_jq_get_json_for_shell()
{
  jq -r "(($1) // empty) | tojson | @sh"
}

_jq_get_value_or_json_for_shell()
{
  jq -r '(('"$1"') // empty) | if type == "array" or type == "object" then [ "json", tojson ] else [ "value", . ] end | @sh'
}

_jq_get_value_list_for_shell()
{
  local value="$(echo "${3:-$1}" | sed -e 's/\\/\\\\/g' -e 's/"/\\"/g')"
  jq -r '(('"$1"') // empty) | if type == "array" then . elif type == "object" then error("expected list for '"$value"'") else [.] end | @sh'
}

_jq_get_json_list_for_shell()
{
  local value="$(echo "${3:-$1}" | sed -e 's/\\/\\\\/g' -e 's/"/\\"/g')"
  jq -r '(('"$1"') // empty) | if type == "array" then . elif type != "object" then error("expected list for '"$value"'") else [.] end | .[] | tojson | @sh'
}

#
# extract a label mapping list from json
# supporting different formats: lists, objects or single values
# result:   sequence of "<label> <value>" pairs
#
_jq_get_labeled_value_list()
{
  jq -r '('$1' // empty) | if type == "object" then . as $m | keys[] | [.,$m[.]] elif type == "array" then .[] | if type == "object" then . as $m | keys[] | [.,$m[.]] else [.,.] end else . end | join("  ")'
}


#
# extract a sequence of labeled arg lists from json
# result: sequence of "<arg1>" .. "<argn>" tupels
#
_jq_get_labeled_arg_list()
{
  jq -r '('$1' // empty) | if type == "array" then .[] | if type == "object" then . as $m | keys[] | [ .,  ($m[.] | if type == "array" then .[] else . end)] else [.] end elif type == "object" then . as $m | keys[] | [ ., $m[.][]] else [.] end | @sh '
}

#
# extract a sequence of plugin specs
# - plugin
# - plugin: arg
# - plugin:
#   - arg1
#   - arg2
# - plugin:
#     config: ...
#     args: 
#       - arg1
#       - arg2
# result: sequence of "<arg1>" .. "<argn>" tupels
#
_jq_get_plugin_list_for_shell()
{
  jq -r '(('"$1"') // empty) | [
       if type == "array" then
          .[] 
       elif type == "object" then
         .
       else
         . 
       end | if type == "array" then 
               if ( . | length) == 0 then
                 error("empty list not supported as plugin spec")
               else
                 { name: .[0], args: .[1:] }
               end
             elif type == "object" then
                if has("name") then
                 .
               else
                 . as $p | keys[] | . as $n | $p[.] | if type == "array" then
                   { name: $n, args: . }
                 elif type == "object" then
                   { name: $n } + .
                 else
                   { name: $n, args: [.] }
                 end
               end
             else
               { name: ., args: [] }
             end | tojson
     ] '"$2"' | @sh'
}


#
# get a json field mapped to a string mapping
_get_labeled_value_list()
{
  _read_hash $1 < <(_jq_get_labeled_value_list "$2")
}

__get() {
  if [ -n "$3" ]; then
     v="$(echo "${!3}" | $1 ".$2" "${@:4}")"
  else
     v="$($1 ".$2")"
  fi
}

_get_value() {
  __get _jq_get_value_for_shell "${@:2}"
  eval $1="$v"
}

_get_json() {
  __get _jq_get_json_for_shell "${@:2}"
  eval $1="$v"
}

_get_value_list() {
  __get _jq_get_value_list_for_shell "${@:2}"
  eval $1="( $v )"
}

_get_json_list() {
  __get _jq_get_json_list_for_shell "${@:2}"
  eval $1="( $v )"
}

_get_value_or_json() {
  __get _jq_get_value_or_json_for_shell "${@:2}"
  eval $1="( $v )"
}


_get_config_value() {
  _get_value "$@" <<<"$CONFIGJSON"
}

getConfigValue() {
  local v
  _get_config_value "$@"
}

getRequiredConfigValue() {
  local v
  _get_config_value "${@}"
  eval v=$v
  if [ -z "$v" ]; then
    fail "configuration attribute '$2' is required"
  fi
}


_get_config_json() {
  _get_json "$@"  <<<"$CONFIGJSON"
}

getConfigJSON() {
  local v
  _get_config_json "$@"
}

getRequiredConfigJSON() {
  local v
  _get_config_json "${@}"
  eval v=$v
  if [ -z "$v" ]; then
    fail "configuration attribute '$2' is required"
  fi
}


_get_config_value_list() {
  _get_value_list "$@" <<<"$CONFIGJSON"
}

getConfigValueList() {
  local v
  _get_config_value_list "$@"
}

getRequiredConfigValueList() {
  local v
  _get_config_value_list "$@"
  eval v=( $v )
  if [ "${#v[@]}" -eq 0 ]; then
    fail "configuration attribute '$2' is required"
  fi
}



_get_config_json_list() {
  _get_json_list "$@" <<<"$CONFIGJSON"
}

getConfigJSONList() {
  local v
  _get_config_json_list "$@"
}

getRequiredConfigJSONList() {
  local v
  _get_config_json_list "$@"
  eval v=( $v )
  if [ "${#v[@]}" -eq 0 ]; then
    fail "configuration attribute '$2' is required"
  fi
}

#######################################


getKeys() {
  _get_value_list "$1" "$2 | keys" "$3"
}

getValue() {
  local v
  _get_value "$@"
}

getRequiredValue() {
  local v
  _get_value "${@}"
  eval v=$v
  if [ -z "$v" ]; then
    if [ -n "$4" ]; then
      fail "$4: configuration attribute '$2' is required"
    else
      fail "configuration attribute '$2' is required"
    fi
  fi
}

getJSON() {
  local v
  _get_json "$@"
}

getValueOrJSON() {
  local v
  _get_value_or_json "$@"
}

getValueList() {
  local v
  _get_value_list "$@"
}

getJSONList() {
  local v
  _get_json_list "$@"
}

getPluginList() {
  local v
  __get _jq_get_plugin_list_for_shell "${@:2}"
  eval $1="( $v )"
}

################################################################################
# json manipulation
################################################################################

deljsonkey() {
    local v
    v="$(eval echo \"\${"$1"}\" | jq 'del(.'$2')')"
    eval $1=\'"$v"\'
}

setjsonvalue() {
    local value="$(echo "$3" | sed -e 's/\\/\\\\/g' -e 's/"/\\"/g')"
    local v
    v="$(eval echo \"\${"$1"}\" | jq '.'$2'="'"$value"'"')"
    eval $1=\'"$v"\'
}

setjsonjson() {
    local v
    v="$(eval echo \"\${"$1"}\" | jq -s '.[0].'""$2""'=.[1] | .[0]' - <( echo "$3"))"
    eval $1=\'"$v"\'
}

getjsonvalue() {
    eval echo \"\$"$1"\" | jq -r '.'"$2 // empty"
}

getrequiredjsonvalue() {
    local v
    v="$(getjsonvalue "$@")"
    if [ "$v" == null ]; then
        fail "field $2 required in $1"
    fi
    echo "$v"
}

################################################################################
# file lookup
################################################################################

lookupFileIn() {
  local opt="-f"
  case "$1" in
    -d) opt="-d"
        shift;;
    -x) opt="-x"
        shift;;
  esac
  local file="$1"
  shift
  if [[ "$DIR" = /* ]]; then
    echo "$file"
  else
    for d in "$@"; do
      if [ $opt "$d/$file" ]; then
        echo "$d/$file"
        return
      fi
    done
  fi
}

productDirs() {
  local p="$PRODUCTDIR"
  eval "$1=( )"

  while true; do
    eval "$1=( \"\$p\" \"\${$1[@]}\" )"
    if [ "$p" = "$ROOTPRODUCTDIR" ]; then
      return
    fi
    p="$(dirname "$(dirname "$p")")"
  done
}

lookupFile() {
  local dirs=( )
  productDirs dirs
  lookupFileIn "$@" "$GENDIR" "${dirs[@]}" "$CURRENT" "$ROOT" "$SOW"
}

lookupPlugin() {
  local dirs=( )
  productDirs dirs
  lookupFileIn -x "plugins/$1/plugin" "${dirs[@]}" "$CURRENT" "$ROOT" "$SOW"
}

lookupStub() {
  local dirs=( )
  productDirs dirs
  lookupFileIn "$1" "${dirs[@]}" "$CURRENT"  "$ROOT" "$SOW"
}

################################################################################
# manifest
################################################################################

# output:
# name
# namespace
# kind
# apiversion
# objectkey
# objectentry

getManifestInfo()
{
  local manifest="$1"
  local msg=""
  if [ -n "$2" ]; then
    msg="$2: "
  fi

  namespace=
  getValue kind kind manifest
  getValue apiversion apiVersion manifest
  getValue name metadata.name manifest
  getValue namespace metadata.namespace manifest

  if [ -z "$name" ]; then
    fail "$msg: name required for manifest"
  fi
  if [ -z "$kind" ]; then
    fail "$msg: kind required for manifest"
  fi
  if [ -z "$apiversion" ]; then
    fail "$msg: apiVersion required for manifest"
  fi

  objectkey="$(md5sum <<<"$name/$namespace/$kind/$apiversion" | cut -d' '  -f1)"
  objectentry="{}"
  setjsonvalue objectentry name "$name"
  if [ -n "$namespace" ]; then
    setjsonvalue objectentry namespace "$namespace"
  fi
  setjsonvalue objectentry kind "$kind"
  setjsonvalue objectentry apiVersion "$apiversion"
  if [ -n "$ord" ]; then
    setjsonvalue objectentry index "$ord"
  else
    deljsonkey objectentry index
  fi
}

getManifestInfoFromEntry()
{
  local v="${1:-objectentry}"
  namespace=
  kind=
  name=
  apiversion=
  ord=
  getValue kind kind $v
  getValue apiversion apiVersion $v
  getValue name name $v
  getValue namespace namespace $v
  getValue ord index $v

  manifest="{}"

  setjsonvalue manifest kind "$kind"
  setjsonvalue manifest apiVersion "$apiversion"
  setjsonvalue manifest metadata.name  "$name"

  if [ -n "$namespace" ]; then
    setjsonvalue manifest metadata.namespace "$namespace"
  fi
}

getAPIServer()
{
  kubectl --kubeconfig "$1" config view --minify=true -o jsonpath='{.clusters[*].cluster.server}'
}

if [ -n "$TRACE" ]; then
  set -x
fi

################################################################################
# standard plugin utilities
################################################################################

PLUGIN_setup()
{
  if [ -z "$PLUGININSTANCE" ]; then
    PLUGININSTANCE="${1:-${2:-$PLUGINNAME}}"
  fi

  if [ -n "$DEPLOYMEMT" ]; then
    SETTINGSJSON="$(cat "$DEPLOYMEMT")"
  fi
  if [ -z "$PLUGINCONFIG" ]; then
    verbose "getting config from settings field $PLUGININSTANCE"
    PLUGINCONFIGJSON="$(spiff merge --json --path "$PLUGININSTANCE" - <<< "$SETTINGSJSON")"
  else
    PLUGINCONFIGJSON="$(cat "$PLUGINCONFIG")"
  fi


  dir="$GENDIR/$PLUGININSTANCE"
  state="$STATEDIR/$PLUGININSTANCE"
  mkdir -p "$dir" "$state"

  verbose "using path $PLUGININSTANCE"
}
