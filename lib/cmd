# SPDX-FileCopyrightText: 2024 SAP SE or an SAP affiliate company and Gardener contributors
#
# SPDX-License-Identifier: Apache-2.0


############################################################################
# commands
############################################################################

#
# The commands module offers a possibility to identify and execute
# sub commands for a shell script.
#
# A sub command is a shell function starting with the prefix CMD_
#
# A command may offer help by providing a function HELP_<name>.
# This function may echo lines with the following syntax
# 
# "<synopsis>:<short description>"
# ":<short description followup>"
# " <options>:<description>"
# " :<option description followup>"
# ""                                      # end of short command summary
# "<any text>                             # long description
#
# The long description is only shown for a dedicated command help
#

################
# Resolve a shortcut for a given set of values
# The resolution is found as follows  (in given order)
# - the given value directly is identical to a possible choice
# - if the given value is a prefix of the possible choice, then the first
#   match is chosen.
# - if the given value is part of the possible choice, then the first
# - the given value
#
# $1:  the value to resolve
# $2+: the possible choices
################
CMDS_resolve_shortcut()
{
  if ! contains "$1" "${@:2}"; then
    for c in "${@:2}"; do
      if [[ "$c" =~ ^$1.* ]];  then
        echo "$c"
        return 0
      fi
    done
    for c in "${@:2}"; do
      if [[ "$c" =~ .*$1.* ]];  then
        echo "$c"
        return 0
      fi
    done
    for c in "${@:2}"; do
      if [[ "$c" =~ .*$(sed -e 's/\(.\)/\1.*/g'<<<"$1") ]];  then
        echo "$c"
        return 0
      fi
    done
  fi
  echo "$1"
}

################
#
# $1: the command value
# $2: the function prefix
# $3: possible command completions (space separated)
# $4+: command arguments
# options:
#   --invalid= function to call for invalid command
################
CMDS_execute_command()
{
  local errf=
  
  while [ $# -gt 0 -a "${1#--}" != "$1" ]; do 
    case "$1" in
      --invalid=*) errf="${1#--invalid=}";;
      *) Error "unknown option $1";;
    esac
    shift
  done

  local cmd="$(CMDS_resolve_shortcut "$1" $3)"
  if [ "$(type -t "$2$cmd")" == "function" ]; then
    $2$cmd "${@:4}"
  else
    if [ -n "$errf" ]; then
      $errf "$2" "$cmd" "${@:4}"
    else
      error "invalid command $cmd"
      return 1
    fi
  fi
}

#
# list all command helps found in the actual shell script
# not listed in CMDS[@}
#
# $1: command prefix (default CMD_)
#
CMDS_list_commands()
{
  QUIET=X
  declare -F | while read a b c d; do
    echo "$c"
  done | grep -e "^${1:-CMD_}" | sed -e 's/^'${1:-CMD_}'\(.*\)/\1/' | sort | while read a; do
    if ! contains "$a" "${CMDS[@]}"; then
      if [ "$(type -t "HELP_$a")" == "function" ]; then
        eval HELP_$a
      else
        echo "$a:"
      fi
    fi
  done
}

CMDS_help_command()
{
  if [ "$(type -t "HELP_$1")" == "function" ]; then
    HELP_$1 | CMDS_format_help X
  else
    QUIET=X
    if [ "$(type -t "HELP_$1")" == "function" ]; then
      HELP_$1 | CMDS_format_help X
    else
      echo "no help found for '$1'"
    fi
  fi
}

#
# $1: if set the description body will be shown also
#     otherwise only the synopsis and option summary is shown
#
CMDS_format_help()
{
  local txt
  local body
  while IFS= read -r line; do
    if [ -z "$line" ]; then
      body=X
      if [ -z "$1" ]; then
        return
      fi
    fi
    if [ -z "$body" ]; then
      IFS=":" read -r a b <<<"$line"
      c="$(trim "$a")"
      if [ "$c" = "$a" ]; then
        printf -v txt "%-30s %s" "$a" "$b"
      else
        printf -v txt "  %-13s %s" "$c" "$b"
      fi
      if [ -z "$c" -o "$c" != "$a" ]; then
        found "  $txt"
      else
        info  "  $txt"
      fi
    else
      echo "$line"
    fi
  done
}

